Q: 这么点数据是打算训练啥
A: 只是继续预训练，是 finetune 的一部分
A: 按我的理解，继续预训练只是为了让模型沾染一点我的语言风格
Q: 这点数据微调也不够啊
A: 应该够的
A: 后面我再加一些 SFT 微调
Q: 这点数据最多做 prompt 罢
A: 把我所有群的发言收集起来，应该能有个粗糙的产物
A: 然后后面我再对着模型的输出微调
A: 之后我可以把很久以前那个“远程搜索雷达”开起来
A: 那个装置可以自动搜索中等热度的直播间并且自动记录观众发言
A: 我可以挑选其中一些，然后手工编写回复，来做 SFT 数据集
Q: 什么叫中等热度
A: 一些人流量很高的直播间主播可能压根不回弹幕
A: 弹幕一般也不期望被主播回，所以更多地可能就是无意义的刷屏，记录这些没有意义
A: 所以优先选择的其实是十几舰的那种杂谈小 V，并且会过滤掉正在打游戏的那部分

Q: 弹簧鞋是什么
A: SpringBoot
Q: 不是春天吗
A: 鬼知道最初这个名字是什么意思

Q: 你根本不知道大公司用没用
A: 其实可以
A: ChessBase 的 Fat Fritz 2 偷了鳕鱼（GPLv3）的代码，被鳕鱼告了
A: 法院判鳕鱼胜诉，ChessBase 开源 Fat Fritz 2 并且专门做了个页面当罪己诏

Q: 所以说，正常的操作难道不是用 Java 去写 wrapper？
A: 对，但 Vulkan 光数据结构就一千多个 struct 和 union
A: 手写能累死你
A: 你还得跟进版本和 extension 的更新

Q: 你什么时候觉得我能写编译器了
A: 首先这不是编译器
A: 这玩意跟编译原理一点关系都没有
A: 你既不需要对输入进行彻底的分析，也不需要对结构进行非平凡的变换

Q: malloc 是你在 create 里面做的吗
A: 是的
Q: 那 free 呢
A: free 在 destroy 里面
Q: 一般来说，malloc 和 free 是库用户自己操控的
A: 首先我就是不想暴露具体数据结构给用户
A: 其次这个设计也并不一般
Q: ？sizeof 需要知道具体的数据结构吗
A: sizeof 不用你公开 struct 内容吗
A: 而且 create/destroy 管内存分配隔壁 WinAPI 也干了，QuickJS 也干了
A: 反而 mbedtls 那个 struct 要调用方自己提供内存
A: 结果我拿 non native 语言调用只能写的人不人鬼不鬼的

Q: 为什么你写的是 C，但是还要 #ifdef _cplusplus
A: 因为这是头文件
A: #ifdef __cplusplus 就是如果引用者是 C++，那么里面的 extern "C" 就会生效
A: 告诉编译器这些函数都具有 C 的调用协定
Q: extern "C" 一般都是 C++ 库要暴露 C API 出去才用的吧
A: 不是
A: C 库考虑给 C++ 用的可能性也加
Q: C++ 调用 C 不需要加 extern "C" 吧
A: 需要的
A: 除非把 .c 文件都用 C++ 编译器编译一遍
A: 然后你要知道 C 和 C++ 有一些语法层面上的兼容但也不是完全兼容
A: 这么搞容易捅篓子
A: 所以还是得用 C 编译器编译这堆 .c 成一个 library
A: 然后再用 C 的调用协定去调

Q: 昨天晚上看了下 Java 的策略模式，怎么会有这种东西啊，是不是因为他没有函数指针
A: 啊，你好，有的有的
Q: then why 策略模式
A: function vs object debate 的事情我之前已经讲过了
A: 如果你的策略是无状态的，那么函数和对象在这里其实没有区别
A: 但如果策略是有状态的，你用函数就得加一个 SomeObject 上下文参数
A: 这就跟基于对象的设计模式一样了
